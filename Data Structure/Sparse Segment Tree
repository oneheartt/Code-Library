struct Node{
    Node *l, *r;
    ll lazy, sum_range, sum_ans;
    Node(){
        l = r = nullptr;
        lazy = sum_range = sum_ans = 0;
    }
};

Node *st;

void apply(Node *node, int l, int r, int x){
    node->sum_ans += 1ll * 2 * node->sum_range * x % inf + 1ll * (r-l+1)*x%inf*x%inf;
    node->sum_ans %= inf;
    node->sum_range += 1ll * (r-l+1)*x%inf;
    node->sum_range %= inf;
    (node->lazy += x)%=inf;
}

void push(int l, int r, Node *node){
    if(node->lazy){
        int mid = l + r >> 1;
        apply(node->l,l,mid,node->lazy);
        apply(node->r,mid+1,r,node->lazy);
        node->lazy = 0;
    }
}

void update(Node *node, int u, int v, int x, int l = 1, int r = 1e9){
    if(v<l || r<u) return;
    if(u<=l && r<=v){
        apply(node,l,r,x);
        return;
    }
    int mid = l + r >> 1;
    if(node->l==nullptr) node->l = new Node();
    if(node->r==nullptr) node->r = new Node();
    push(l,r,node);
    update(node->l,u,v,x,l,mid);
    update(node->r,u,v,x,mid+1,r);
    node->sum_range = (node->l->sum_range + node->r->sum_range)%inf;
    node->sum_ans = (node->l->sum_ans + node->r->sum_ans)%inf;
}

ll get(Node *node, int u, int v, int l = 1, int r = 1e9){
    if(v<l || r<u) return 0;
    // cout << l << " " << r << endl;
    if(u<=l && r<=v) return node->sum_ans;
    int mid = l + r >> 1;
    if(node->l==nullptr) node->l = new Node();
    if(node->r==nullptr) node->r = new Node();
    push(l,r,node);
    ll ans = 0;
    if(node->l) (ans += get(node->l,u,v,l,mid))%=inf;
    if(node->r) (ans += get(node->r,u,v,mid+1,r))%=inf;
    return ans;
}
